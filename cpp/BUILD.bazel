# Bazel build
# C/C++ documentation: https://docs.bazel.build/versions/master/be/c-cpp.html

load("//bazel:ray.bzl", "COPTS", "copy_to_workspace")
load("@com_github_grpc_grpc//bazel:cython_library.bzl", "pyx_library")

cc_library(
    name = "ray_api",
    srcs = glob([
        "src/ray/api.cc",
        "src/ray/api/*.cc",
        "src/ray/api/*.h",
        "src/ray/app/*.cc",
        "src/ray/app/*.h",
        "src/ray/runtime/*.cc",
        "src/ray/runtime/*.h",
        "src/ray/runtime/**/*.cc",
        "src/ray/runtime/**/*.h",
        "src/ray/runtime/task/*.cc",
        "src/ray/runtime/task/*.h",
        "src/ray/util/*.cc",
        "src/ray/util/*.h",
        "src/ray/*.cc",
        "src/ray/*.h",
        "src/ray/worker/default_worker.cc",
    ]),
    hdrs = glob([
        "include/ray/*.h",
        "include/ray/**/*.h",
        "include/ray/**/**/*.h",
    ]),
    copts = COPTS,
    linkopts = ["-ldl"],
    linkstatic = True,
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [
        "//:core_worker_lib",
        "//:ray_common",
        "//:ray_util",
        "@boost//:asio",
        "@boost//:thread",
        "@com_google_absl//absl/synchronization",
        "@msgpack",
    ],
)

pyx_library(
    name = "sample",
    srcs = glob(["src/example/sample.pyx"]),
    deps = [
        "ray_api",

    ],
)

cc_library(
    name = "R",
    srcs = glob([ "src/rectangle/Rectangle.cpp"]),
    hdrs = glob([ "src/rectangle/Rectangle.h"]),
    linkstatic = True,
    visibility = ["//visibility:public"],
    copts = COPTS,
    strip_include_prefix = "src",
    deps = [
        "ray_api"
    ],
)

pyx_library(
    name = "rect",
    srcs = glob(["src/rectangle/Rectangle.pxd", "src/rectangle/rect.pyx"]),
    deps = [
         "//cpp:R"
    ],
)

copy_to_workspace(
    name = "cp_rect",
    srcs = ["src/rectangle/rect.so"],
    dstdir = "src/rectangle",
)

genrule(
    name = "rect_pkg",
    srcs = [
        ":cp_rect",
    ],
    outs = ["rect_pkg.out"],
    cmd = """
        echo "$${PWD}" > $@
    """,
    local = 1,
)

cc_library(
    name = "actor",
    srcs = glob([
        "src/actor/actor.cpp",
    ]),
    linkstatic = True,
    strip_include_prefix = "src",
    hdrs = glob([ "src/actor/actor.h"]),
    visibility = ["//visibility:public"],
    copts = COPTS,
    deps = [
        "ray_api"
    ],
)

pyx_library(
    name = "router",
    srcs = glob(["src/actor/actor.pxd", "src/actor/ac.pyx"]),
    deps = [
         "actor"
    ],
)
genrule(
    name = "ray_actor_pkg",
    srcs = [
        "actor",
        "ray_api",
        "router"
    ],
    outs = ["ray_actor_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)" &&
        mkdir -p "$$WORK_DIR/python/ray/core/src/ray/cpp/" &&
        cp -f $(location actor) "$$WORK_DIR/python/ray/core/src/ray/cpp/default_worker" &&
        cp -f $(locations ray_api) "$$WORK_DIR/python/ray/core/src/ray/cpp/" &&
        echo "$$WORK_DIR" > $@
    """,
    local = 1,
)
cc_binary(
    name = "actor_bin",
    testonly = 1,
    srcs = glob([
        "src/actor/actor.cpp",
        "src/actor/actor.h"
    ]),
    copts = COPTS,
    linkstatic = False,
    visibility = ["//visibility:public"],
    deps = [
        "ray_api"
    ],
)

cc_binary(
    name = "example",
    testonly = 1,
    srcs = glob([
        "src/example/example.cc",
    ]),
    copts = COPTS,
    linkstatic = False,
    deps = [
        "ray_api"
    ],
)

cc_test(
    name = "api_test",
    srcs = glob([
        "src/ray/test/*.cc",
    ]),
    copts = COPTS,
    linkstatic = False,
    deps = [
        "ray_api",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cluster_mode_test",
    testonly = 0,
    srcs = glob([
        "src/ray/test/cluster/*.cc",
    ]),
    copts = COPTS,
    linkstatic = True,
    deps = [
        "ray_api",
        "@com_google_googletest//:gtest_main",
    ],
)

genrule(
    name = "ray_cpp_pkg",
    srcs = [
        "cluster_mode_test",
        "ray_api",
    ],
    outs = ["ray_cpp_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)" &&
        mkdir -p "$$WORK_DIR/python/ray/core/src/ray/cpp/" &&
        cp -f $(location cluster_mode_test) "$$WORK_DIR/python/ray/core/src/ray/cpp/default_worker" &&
        cp -f $(locations ray_api) "$$WORK_DIR/python/ray/core/src/ray/cpp/" &&
        echo "$$WORK_DIR" > $@
    """,
    local = 1,
)
